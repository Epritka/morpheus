@startuml BuilderI

package neo4j <<Database>> {
    class DriverWithContext
    class SessionWithContext
    class ExplicitTransaction
    class Record
}

package context <<Cloud>> {
    class Context
}

interface  EntityI {
    + String() string
}

interface ClauseI {
    + String() string
}

interface BuilderI {
    + Append(ClauseI) BuilderI
    + Where(string) BuilderI
    + Create(...EntityI) BuilderI
    + Match(...EntityI) BuilderI
    + OptionalMatch(...EntityI) BuilderI
    + Set(string) BuilderI
    + Merge(entities ...EntityI) Merge
    + Call(Function) BuilderI
    + With(...Property) BuilderI
    + Delete(...EntityI) BuilderI
    + DetachDelete(...EntityI) BuilderI
    + Return(...Property) BuilderI
    + Limit(int) BuilderI
    + Build() string
}

Driver o-- DriverWithContext
class Driver {
	+ Driver neo4j.DriverWithContext
    + NewExecuter() *Executer
    + NewExecuterWithContext(ctx context.Context) *Executer
}

Executer *-- BuilderI
Executer o-- SessionWithContext
Executer o-- ExplicitTransaction
class Executer {
    + session    neo4j.SessionWithContext
    + tx         neo4j.ExplicitTransaction
    + autoCommit bool

    + Begin() (*Transaction, error)
    + BeginWithContext(ctx context.Context) (*Transaction, error)
    + Close() error
    + CloseWithContext(ctx context.Context) error
    + Do() ([]*neo4j.Record, error)
    + DoQuery(cypher string) ([]*neo4j.Record, error)
    + DoQueryWithContext(ctx context.Context, cypher string) ([]*neo4j.Record, error)
    + DoWithContext(ctx context.Context) ([]*neo4j.Record, error)
    + Create(model Entity) error
    + Update(model Entity) error
    + Load(model Entity) error
    + Delete(model Entity) error
    - begin(ctx context.Context) (*Transaction, error)
    - close(ctx context.Context) error
    - do(ctx context.Context, cypher string, resultParser func(neo4j.ResultWithContext) error) error
    - doParse(ctx context.Context, resultParser func(neo4j.ResultWithContext) error) error
    - doQueryParse(ctx context.Context, cypher string, resultParser func(neo4j.ResultWithContext) error) error
    - doQueryResult(ctx context.Context, cypher string) ([]*neo4j.Record, error)
    - doResult(ctx context.Context) ([]*neo4j.Record, error)
}

Transaction *-- Executer
class Transaction {
    + Commit() error
    + CommitWithContext(ctx context.Context) error
    + RollBack() error
    + RollBackWithContext(ctx context.Context) error
    + Close() error
    + CloseWithContext(ctx context.Context) error
    - commit(ctx context.Context) error
    - rollback(ctx context.Context) error
    - close(ctx context.Context) error
}

@enduml