@startuml BuilderI
interface  EntityI {
    + String() string

}

' class BaseOfEntity {
    '     + Alias      string
    '     + Labels     []string
    '     + Properties map[string]any

    '     + String() string
    '     - setAlias(alias string) *Base
    '     - setLables(labels []string) *Base
    '     - setProperties(properties map[string]any) *Base
    '
}

' Node *-- BaseOfEntity
' Node <|.. EntityI
' class Node {
    '     + SetAlias(alias string) *Node
    '     + SetLables(labels ...string) *Node
    '     + SetProperties(properties map[string]any) *Node
    '     + String() string
    '
}

' Relationship *-- BaseOfEntity
' Relationship <|.. EntityI
' class Relationship {
    '     + SetAlias(alias string) *Relationship
    '     + SetLables(labels ...string) *Relationship
    '     + SetProperties(properties map[string]any) *Relationship
    '     + String() string
    '
}

' AnyRelationship <|.. EntityI
' class AnyRelationship {
    '     + String() string
    '
}

' PatternList <|.. EntityI
' PatternList o-- EntityI
' PatternList o-- Pattern
' class PatternList {
    '     - start EntityI
    '     - first *Pattern
    '     - last  *Pattern
    '     - lastRelationship EntityI

    '     + Empty() bool
    '     + From(entity EntityI) *PatternList
    '     + Join(entity EntityI) *PatternList
    '     + Related(relationship EntityI) *PatternList
    '     + String() string
    '     + To(entity EntityI) *PatternList
    '     - append(pattern *Pattern) *PatternList
    '
}

' Pattern o-- EntityI
' Pattern o-- Pattern
' class Pattern {
    '     - node         EntityI
    '     - relationship EntityI
    '     - directedType directedType
    '     - next         *Pattern
    '
}

' Function <|.. EntityI
' class Function {
    ' 	- name       string
    ' 	- parameters []string
    ' 	- yield      []string
    '     + String() string
    '     + Yeald(parameters ...string) *Function
    '
}

class BaseEntity {
    + Id        int64
    + ElementId string
}

Node *-- BaseEntity
class Node {}

Relationship *-- BaseEntity
class Relationship {}

Person *-- Node
class Person {
    + Job  string
    + Name string
}

Movie *-- Node
class Movie {
    + Released int64
    + Title    string
}

ActedIn *-- Relationship
class ActedIn {
    + Role string
}

class Executer {
    entity.Builder

    session    neo4j.SessionWithContext
    tx         neo4j.ExplicitTransaction
    autoCommit bool
}

@startuml BuilderI
interface  EntityI {
    + String() string
}

interface ClauseI {
    + String() string
}

interface BuilderI {
    + Append(ClauseI) BuilderI
    + Where(string) BuilderI
    + Create(...EntityI) BuilderI
    + Match(...EntityI) BuilderI
    + OptionalMatch(...EntityI) BuilderI
    + Set(string) BuilderI
    + Merge(entities ...EntityI) Merge
    + Call(Function) BuilderI
    + With(...Property) BuilderI
    + Delete(...EntityI) BuilderI
    + DetachDelete(...EntityI) BuilderI
    + Return(...Property) BuilderI
    + Limit(int) BuilderI
    + Build() string
}

Builder <|.. BuilderI
Builder o-- Clause
class Builder {
    - firstClause *Clause
    - lastClause  *Clause
    + Append(clauseI ClauseI) Builder
    + Build() string
    + Call(function Function) Builder
    + Create(entities ...Entity) Builder
    + Delete(entities ...Entity) Builder
    + DetachDelete(entities ...Entity) Builder
    + Limit(limit int) Builder
    + Match(entities ...Entity) Builder
    + Merge(entities ...Entity) Merge
    + OptionalMatch(entities ...Entity) Builder
    + Return(properties ...Property) Builder
    + Set(setter string) Builder
    + Where(condition string) Builder
    + With(properties ...Property) Builder
    - empty() bool
}

Clause *-- ClauseI
Clause o-- Clause
class Clause {
    + Next *Clause
}

class BaseOfEntity {
    + Alias      string
    + Labels     []string
    + Properties map[string]any

    + String() string
    - setAlias(alias string) *Base
    - setLables(labels []string) *Base
    - setProperties(properties map[string]any) *Base
}

Node *-- BaseOfEntity
Node <|.. EntityI
class Node {
    + SetAlias(alias string) *Node
    + SetLables(labels ...string) *Node
    + SetProperties(properties map[string]any) *Node
    + String() string
}

Relationship *-- BaseOfEntity
Relationship <|.. EntityI
class Relationship {
    + SetAlias(alias string) *Relationship
    + SetLables(labels ...string) *Relationship
    + SetProperties(properties map[string]any) *Relationship
    + String() string
}

AnyRelationship <|.. EntityI
class AnyRelationship {
    + String() string
}

PatternList <|.. EntityI
PatternList o-- EntityI
PatternList o-- Pattern
class PatternList {
    - start EntityI
    - first *Pattern
    - last  *Pattern
    - lastRelationship EntityI

    + Empty() bool
    + From(entity EntityI) *PatternList
    + Join(entity EntityI) *PatternList
    + Related(relationship EntityI) *PatternList
    + String() string
    + To(entity EntityI) *PatternList
    - append(pattern *Pattern) *PatternList
}

Pattern o-- EntityI
Pattern o-- Pattern
class Pattern {
    - node         EntityI
    - relationship EntityI
    - directedType directedType
    - next         *Pattern
}

Function <|.. EntityI
class Function {
	- name       string
	- parameters []string
	- yield      []string
    + String() string
    + Yeald(parameters ...string) *Function
}

@enduml
@enduml